hydra:
  run:
    dir: ${data_root_dir}/${tag}/${now:%Y-%m-%d_%H-%M-%S}/

defaults:
  - tasks: water_in_box.yaml
  - envs: pour_env.yaml

data_root_dir: /tmp


tag: default
seed: 26 #5 starts out in goal state now
original_cwd : ''

root_tag: default
root_n_iter: 0
vis: False
show_node_error: False
max_n_nodes_to_eval: 10
n_transitions: 10

save_every: 1

n_samples_per_path: 1
max_path_length: 3
max_leaf_nodes: 3
max_search_depth: 3

save_transition_cfg:
    dirpath: /home/lagrassa/plan_abstractions/pourbetterprecond_mde_train_val #pourbetterprecond


# these are here in case collect_skill_data_via_planner.py is ran outside of run_iterative_training.sh
hydra_root_dir: /home/lagrassa/plan_abstractions/iterative_training/hydra_dirs
path_to_skill_data_records_csv: /home/lagrassa/plan_abstractions/iterative_training/skill_data_records.csv
path_to_model_records_csv: /home/lagrassa/plan_abstractions/iterative_training/model_records.csv
planner_results_root_dir: /tmp/plan_stat_results


skills:
  WaterTransport2D:
    use: True
    cache_dir: /tmp
    param_sampling_probabilities:
      object_centric: 0.5
      relation_centric: 0.0
      random: 0.5
      task_oriented: 0.0 #should be 0 for collect_skill_data
    high_level_models:
      SEMModel1:
        debug_name : RigidModel 
        type: SEMModel
        sem_cfg:
          type: RigidModel #DrawerAndRobot #SEMSimpleFreeSpace # SEMMLP
          env: WaterEnv2D #actually correct
          dim_state: 3
          pillar_state_convert: False
        deviation_cfg:
          use_deviation_model: 0
          state_and_param_to_features: extract_first_and_last
          env: WaterEnv2D
          type: MLPModel
          dim_state: 3
          run_path: iam-lab/water/1febpe4y #171q1i5r #25vt1xe2 #29t8813n
          acceptable_deviation: 0.01
  Pour:
    use: True
    cache_dir: /tmp
    param_sampling_probabilities:
      object_centric: 0.0
      relation_centric: 0.0
      random: 1.0
      task_oriented: 0.0 #should be 0 for collect_skill_data
    high_level_models:
      SEMModel1:
        debug_name : PourLearnedModel
        type: SEMModel
        sem_cfg:
          type: RFRModel #PourConstantModel
          env: WaterEnv3D #actually correct
          dim_state: 13
          pillar_state_convert: False
          model_cfg:
            load: True
            save_file: /home/lagrassa/git/model-preconditions/data/RFRModel.npy

        deviation_cfg:
          use_deviation_model: 1
          state_and_param_to_features: identity #extract_first_and_last
          env: WaterEnv2D
          type: MLPModel
          dim_state: 13
          run_path: iam-lab/water/1069skio #3kekiovw #17uqg8bw   #3m7xytf4 #171q1i5r #25vt1xe2 #29t8813n
          acceptable_deviation: 0.6
planner:
  type: MRAStar # MCTS, AStar
  timeout: 300
  max_search_depth: 50 #doesn't do anything
  MRAStar:
    #ablation_type: anchor_only #anchor_only, comment out for none
    T_plan_max: 1
    T_exec_max: 60
    eps: 5
    num_models: 1
    wm: [10,1]
    n_params_per_skill: 30
    use_gt_effects: False
    use_multiple_models : True
